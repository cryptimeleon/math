plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
}

group = 'org.cryptimeleon'
version = '1.0.0' + (Boolean.valueOf(System.getProperty("disablesnapshot")) ? "" : "-SNAPSHOT")

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}



repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version:'1.1'
    implementation group: 'org.reflections', name: 'reflections', version:'0.9.10'
    
    // For tests
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0',
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
}


test {
    useJUnitPlatform()
    maxParallelForks 4
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

task javadocLatex(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    options.addBooleanOption("-allow-script-in-comments", true)
    options.header = "<script type\"text/javascript&\" src=\"" +
            "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?" +
            "config=TeX-MML-AM_CHTML\"></script>"
    // reduce javadoc linting
    options.addBooleanOption('Xdoclint:none', true)
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadocLatex) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

java {
    registerFeature("tests") {
        usingSourceSet(sourceSets.test)
    }
}


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                artifacts {
                    archives javadocJar, sourcesJar
                }

                pom {
                    name = 'Craco'
                    description = 'Craco (CRyptogrAphic COnstructions) is a Java library providing implementations of various cryptographic primitives and low-level constructions. This includes primitives such as commitment schemes, signature schemes, and much more.\n' +
                            '\n' +
                            'The goal of Craco is to provide common cryptographic schemes for usage in more high-level protocols as well as to offer facilities for improving the process of implementing more low-level schemes such as signature and encryption schemes.'
                    url = 'https://cryptimeleon.org'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'jbobolz'
                            name = 'Jan Bobolz'
                            email = 'mail@jan-bobolz.de'
                            organization = 'Paderborn University'
                        }
                        developer {
                            id = 'feidens'
                            name = 'Fabian Eidens'
                            email = 'fabianeidens@gmail.com'
                            organization = 'Paderborn University'
                            url = 'https://feidens.github.io/'
                        }
                        developer {
                            id = 'rheitjoh'
                            name = 'Raphael Heitjohann'
                            email = 'rheitjoh@mail.uni-paderborn.de'
                            organization = 'Paderborn University'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/cryptimeleon/craco.git'
                        developerConnection = 'scm:git:https://github.com/cryptimeleon/craco.git'
                        url = 'https://github.com/cryptimeleon/craco/'
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username = System.getProperty('nexus.user')
                    password = System.getProperty('nexus.key')
                }
                // change URLs to point to your repos, e.g. http://my.org/repo
                id = 'ossrh'
                name = 'Central Repository OSSRH'
                def releasesRepoUrl = "$buildDir/repos/releases"
                def snapshotsRepoUrl = "$buildDir/repos/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }

}

