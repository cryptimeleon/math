plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
}

group = 'de.upb.crypto'
version = '2.0.0' + (Boolean.valueOf(System.getProperty("disablesnapshot")) ? "" : "-SNAPSHOT")

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}



repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://nexus.cs.upb.de/repository/sfb901-libs/" }
    maven { url "https://nexus.cs.upb.de/repository/sfb901-releases/" }
    maven { url "https://nexus.cs.upb.de/repository/sfb901-snapshots/" }
}

dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version:'1.1'
    implementation group: 'org.reflections', name: 'reflections', version:'0.9.10'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version:'2.1'

    // For tests
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0',
            'com.github.noconnor:junitperf:1.15.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
}


test {
    useJUnitPlatform()
    maxParallelForks 4
    //we want display the following test events
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task javadocLatex(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    options.addBooleanOption("-allow-script-in-comments", true)
    options.header = "<script type\"text/javascript&\" src=\"" +
            "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?" +
            "config=TeX-MML-AM_CHTML\"></script>"
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

java {
    registerFeature("tests") {
        usingSourceSet(sourceSets.test)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        maven {
            credentials {
                username = System.getProperty('nexus.user')
                password = System.getProperty('nexus.key')
            }
            def releasesRepoUrl = "https://nexus.cs.upb.de/repository/sfb901-releases/"
            def snapshotsRepoUrl = "https://nexus.cs.upb.de/repository/sfb901-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

