package de.upb.crypto.math.structures.quotient;

import de.upb.crypto.math.interfaces.structures.Ring;
import de.upb.crypto.math.interfaces.structures.RingElement;
import de.upb.crypto.math.serialization.ObjectRepresentation;
import de.upb.crypto.math.serialization.RepresentableRepresentation;
import de.upb.crypto.math.serialization.Representation;

import java.util.Collections;
import java.util.List;

/**
 * Implements a principal ideal, i.e. an ideal that is generated by a single element.
 */
public class PrincipalIdeal extends Ideal {
    protected RingElement generator;

    public PrincipalIdeal(Representation repr) {
        generator = ((Ring) repr.obj().get("ring").repr().recreateRepresentable()).getElement(repr.obj().get("generator"));
    }

    public PrincipalIdeal(RingElement generator) {
        this.generator = generator;
    }

    @Override
    public boolean isMember(RingElement e) {
        if (!generator.getStructure().equals(e.getStructure()))
            return false;
        return generator.divides(e);
    }

    /**
     * Returns a generator of this principal ideal
     */
    public RingElement getGenerator() {
        return generator;
    }

    @Override
    public List<RingElement> getGenerators() {
        return Collections.singletonList(generator);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (getClass() != obj.getClass())
            return false;
        return isMember(((PrincipalIdeal) obj).generator);
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public Representation getRepresentation() {
        ObjectRepresentation repr = new ObjectRepresentation();
        repr.put("generator", generator.getRepresentation());
        repr.put("ring", new RepresentableRepresentation(generator.getStructure()));

        return repr;
    }
}
